#!/bin/sh

#
# cmd tun_dev tun_mtu link_mtu ifconfig_local_ip ifconfig_remote_ip [ init | restart ]
# custom_script: Running /jffs/scripts/openvpn-event (args: tun11 1500 1544 10.99.100.4 10.99.100.3 init)
#

VPN_DEVICE="$1"
TUN_MTU="$2"
LINK_MTU="$3"
LOCAL_IP="$4"
REMOTE_IP="$5"

VPN_ROUTES=$(cat /jffs/pbr/route.list)

VPN_ROUTE_TABLE=ovpnc1

DEFAULT_CRON_ID=1
DEFAULT_DEV=tun11
DEFAULT_LOCAL_IP=10.99.100.4
DEFAULT_REMOTE_IP=10.99.100.3

VPN_DEV=${1:-$DEFAULT_DEV}
LAN_DEV=br0
FWMARK=0x3000000/0x7f800000
IPRULE=6
LOCAL_IP=${4:-$DEFAULT_LOCAL_IP}
REMOTE_IP=${5:-$DEFAULT_REMOTE_IP}

cru a "$DEFAULT_CRON_ID" "* * * * * /bin/sh /jffs/scripts/openvpn-event $VPN_DEV A A $LOCAL_IP $REMOTE_IP"

test_remote_ip()
{
  ping -c2 -W1 $1 >/dev/null 2>&1 && echo 1 || echo 0
}

LAST_STATUS=$(cat /tmp/openvpn-last-status)

sleep 2
CONNECTED=$(test_remote_ip $REMOTE_IP)

RESTART_DNSMASQ=1
if [[ $CONNECTED -eq 1 ]]; then
  /usr/bin/logger -t "openvpn-event-$VPN_DEV" "connected"
  echo "connected" > /tmp/openvpn-last-status

  if [[ "$LAST_STATUS" = "connected" ]]; then
    RESTART_DNSMASQ=0
  fi
else 
  /usr/bin/logger -t "openvpn-event-$VPN_DEV" "disconnected"
  echo "disconnected" > /tmp/openvpn-last-status

  if [[ "$LAST_STATUS" = "disconnected" ]]; then
    RESTART_DNSMASQ=0
  fi
fi

modprobe xt_set

if [[ $CONNECTED -eq 1 ]] ; then
  ip rule list |grep ^"${IPRULE}:" >/dev/null 2>&1 || ip rule add pref $IPRULE fwmark $FWMARK table $VPN_ROUTE_TABLE

  ipset -q create PBR_DNS hash:ip timeout 3600
  ipset -q create PBR_SRC hash:ip 

##  iptables-save | grep "\-A POSTROUTING -o $VPN_DEV -j MASQUERADE" >/dev/null 2>&1 || iptables -t nat -A POSTROUTING -o $VPN_DEV -j MASQUERADE

  iptables-save | grep "^:FL_PBR "   >/dev/null 2>&1 || iptables -t mangle -N FL_PBR
  iptables-save | grep "^:AUTO_VPN " >/dev/null 2>&1 || iptables -t mangle -N AUTO_VPN

  iptables-save | grep "\-A FORWARD \-i $LAN_DEV \-o $VPN_DEV \-j ACCEPT" >/dev/null 2>&1 || iptables -I FORWARD -i $LAN_DEV -o $VPN_DEV -j ACCEPT
  iptables-save | grep "\-A FORWARD \-i $LAN_DEV \-o $LAN_DEV \-j ACCEPT" >/dev/null 2>&1 || iptables -I FORWARD -i $VPN_DEV -o $LAN_DEV -j ACCEPT

  iptables-save | grep "\-A AUTO_VPN -m set --match-set PBR_DNS dst -j FL_PBR" >/dev/null 2>&1 || iptables -t mangle -A AUTO_VPN -m set --match-set PBR_DNS dst -j FL_PBR
  iptables-save | grep "\-A AUTO_VPN -m set --match-set PBR_SRC src -j FL_PBR" >/dev/null 2>&1 || iptables -t mangle -A AUTO_VPN -m set --match-set PBR_SRC src -j FL_PBR
  iptables-save | grep "\-A FL_PBR -j MARK" >/dev/null 2>&1 || iptables -t mangle -A FL_PBR -j MARK --set-xmark $FWMARK
  iptables-save | grep "\-A FL_PBR -j ACCEPT" >/dev/null 2>&1 || iptables -t mangle -A FL_PBR -j ACCEPT

  iptables-save | grep "\-A PREROUTING -i $LAN_DEV -j AUTO_VPN" >/dev/null 2>&1 || iptables -t mangle -A PREROUTING -i $LAN_DEV -j AUTO_VPN

  # enable route
  if [[ -z "$(ip route show table $VPN_ROUTE_TABLE | grep default | grep $VPN_DEV)" ]]; then
    for vr in $VPN_ROUTES; do
      /usr/bin/logger -t "openvpn-event-$VPN_DEV" "ip route add $vr dev $VPN_DEV via $REMOTE_IP";
      ip route add $vr dev $VPN_DEV via $REMOTE_IP;
    done

    ip route del table $VPN_ROUTE_TABLE default
    ip route add table $VPN_ROUTE_TABLE default via $REMOTE_IP dev $VPN_DEV
  fi 

else
  ip rule del pref $IPRULE

#  #iptables -t nat -D POSTROUTING -o $VPN_DEV -j MASQUERADE
  iptables -t mangle -D PREROUTING -i $LAN_DEV -j AUTO_VPN

  # delete route
  for vr in $VPN_ROUTES; do
    /usr/bin/logger -t "openvpn-event-$VPN_DEV" "ip route delete $vr dev $VPN_DEV via $REMOTE_IP";
    ip route delete $vr dev $VPN_DEV via $REMOTE_IP;
  done

  ip route del table $VPN_ROUTE_TABLE default
  #ip route add table $VPN_ROUTE_TABLE default via $REMOTE_IP dev $LAN_DEV
fi

if [[ $RESTART_DNSMASQ -eq 1 ]]; then 
  service restart_dnsmasq
fi


